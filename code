# генератор значений веса, где вес 2 объекта потерян 
# находим средний вес 
set.seed(0)
weight=rnorm(100, 5, 2)
weight[2] = NA
m = mean(weight, na.rm=T) 
m

# считаем средний размер с 95%-доверительным интервалом
library(DescTools)
set.seed(0)
size=rnorm(100, 24, 6)
m=MeanCI(size, conf.level = 0.95) 
m
# вывод дает среднее, нижнуюю и верхнюю границы интервала
# статистическая оценка процента конверсии (200 человек зашли, 30 купили)
BinomCI(30, 200, conf.level = 0.95)
# с вероятностью 95% мы можем предположить, что процент конверсии в аналогичных условиях будет находится в диапазоне от 10,7 до 20,6%

# расчет описательных статистик 
set.seed(0)
salary=runif(1000, 30, 350)**2
hist(salary)
# получили ассиметричное распределение величин от 30 до 350

# среднее арифметическое и медиана 
mean(salary)
[1] 44699.48
median(salary)
[1] 34259.9

# дисперсия и стандартное отклонение 
var(salary)
[1] 1313837571
sd(salary)
[1] 36246.9
sqrt(var(salary))
[1] 36246.9

# квартили и межквартильный размах
quantile(salary, 0.25)
quantile(salary, 0.75)
IQR(salary)

set.seed(0)
df = data.frame(size=rnorm(100, 24, 6), joy=sample(0:1, 100, replace=T), color=sample(1:3, 100, replace=T))
df
#         size joy color
# 1   28.69116   1     3
# 2   19.33934   0     3
# 3   20.30406   0     3
# 4   24.27948   0     1
# 5   17.21769   1     1
# 6   27.46031   0     3
# 7   16.31550   1     3
# 8   33.75268   1     1
# 9   20.99582   0     1
# 10  34.06978   0     1
# 11  21.52488   0     1
# 12  18.16628   0     1
# 13  24.15230   0     3
# 14  24.16485   1     3
# 15  13.91890   0     1
# 16  30.32251   1     2
# 17  17.28241   1     3
# 18  26.01370   1     3
# 19  26.96877   0     3
# 20  24.82832   0     2
# 21  23.28725   0     2
# 22  25.18611   1     1
# 23  17.58784   1     2
# 24  19.18072   1     3
# 25  17.31741   0     2
# 26  33.48055   0     2
# 27  32.98691   0     2
# 28  25.57587   0     1
# 29  16.60259   1     1
# 30  23.97766   0     1
# 31  33.07003   0     1
# 32  21.14581   0     2
# 33  28.78750   0     1
# 34  18.15598   0     1
# 35  28.13624   1     2
# 36  18.26497   0     2
# 37  16.60976   1     1
# 38  18.25865   1     1
# 39  18.78130   1     1
# 40  18.53592   1     3
# 41  28.44766   1     2
# 42  24.41107   1     2
# 43  22.05750   1     1
# 44  17.48098   1     2
# 45  17.90443   0     3
# 46  19.39326   1     3
# 47  17.28168   0     1
# 48  21.31095   1     2
# 49  26.83042   0     1
# 50  16.91706   0     1
# 51  32.82154   1     2
# 52  16.13148   1     1
# 53  23.42085   0     1
# 54  38.21832   0     1
# 55  29.34376   0     1
# 56  22.48690   1     2
# 57  18.80542   1     2
# 58  27.49552   0     3
# 59  23.92482   0     2
# 60  21.75087   0     1
# 61  25.90731   0     1
# 62  21.06717   1     2
# 63  39.95195   1     2
# 64  34.08167   0     1
# 65  28.67750   1     1
# 66  28.27944   0     3
# 67  20.74271   1     3
# 68  29.31467   0     1
# 69  21.90843   1     3
# 70  17.95167   1     2
# 71  35.29910   0     2
# 72  18.42617   1     3
# 73  22.23482   0     3
# 74  20.31030   1     1
# 75  18.31755   1     3
# 76  27.59385   0     1
# 77  14.85831   0     2
# 78  22.76287   0     1
# 79  20.55423   0     1
# 80  15.65900   0     3
# 81  23.57750   0     2
# 82  21.41472   1     2
# 83  20.44665   0     2
# 84  29.88670   0     1
# 85  27.19446   0     3
# 86  23.45726   0     3
# 87  24.93894   1     3
# 88  19.57613   1     2
# 89  22.79195   0     2
# 90  30.61306   0     2
# 91  23.89951   1     1
# 92  24.97073   0     3
# 93  36.14857   1     1
# 94  19.77783   0     3
# 95  29.76475   1     3
# 96  34.74291   1     1
# 97  17.61501   0     2
# 98  24.10582   0     1
# 99  21.66055   0     2
# 100 21.05500   1     3
df['size']
# size
# 1   28.69116
# 2   19.33934
# 3   20.30406
# 4   24.27948
# 5   17.21769
# 6   27.46031
# 7   16.31550
# 8   33.75268
# 9   20.99582
# 10  34.06978
# 11  21.52488
# 12  18.16628
# 13  24.15230
# 14  24.16485
# 15  13.91890
# 16  30.32251
# 17  17.28241
# 18  26.01370
# 19  26.96877
# 20  24.82832
# 21  23.28725
# 22  25.18611
# 23  17.58784
# 24  19.18072
# 25  17.31741
# 26  33.48055
# 27  32.98691
# 28  25.57587
# 29  16.60259
# 30  23.97766
# 31  33.07003
# 32  21.14581
# 33  28.78750
# 34  18.15598
# 35  28.13624
# 36  18.26497
# 37  16.60976
# 38  18.25865
# 39  18.78130
# 40  18.53592
# 41  28.44766
# 42  24.41107
# 43  22.05750
# 44  17.48098
# 45  17.90443
# 46  19.39326
# 47  17.28168
# 48  21.31095
# 49  26.83042
# 50  16.91706
# 51  32.82154
# 52  16.13148
# 53  23.42085
# 54  38.21832
# 55  29.34376
# 56  22.48690
# 57  18.80542
# 58  27.49552
# 59  23.92482
# 60  21.75087
# 61  25.90731
# 62  21.06717
# 63  39.95195
# 64  34.08167
# 65  28.67750
# 66  28.27944
# 67  20.74271
# 68  29.31467
# 69  21.90843
# 70  17.95167
# 71  35.29910
# 72  18.42617
# 73  22.23482
# 74  20.31030
# 75  18.31755
# 76  27.59385
# 77  14.85831
# 78  22.76287
# 79  20.55423
# 80  15.65900
# 81  23.57750
# 82  21.41472
# 83  20.44665
# 84  29.88670
# 85  27.19446
# 86  23.45726
# 87  24.93894
# 88  19.57613
# 89  22.79195
# 90  30.61306
# 91  23.89951
# 92  24.97073
# 93  36.14857
# 94  19.77783
# 95  29.76475
# 96  34.74291
# 97  17.61501
# 98  24.10582
# 99  21.66055
# 100 21.05500

set.seed(0)
df=rbind(data.frame(food='Перчик', score=rnorm(100, 3.5, 1.2)), data.frame(food='Огурчик', score=rnorm(100, 4.1, 1.6)))
df

t = t.test(score~food, df) # различается ли оценка от типа корма?
t

# Welch Two Sample t-test
# data:  score by food
# t = 2.669, df = 175.23, p-value = 0.008322
# alternative hypothesis: true difference in means between group Огурчик and group Перчик is not equal to 0
# 95 percent confidence interval:
# 0.1302568 0.8695740
# sample estimates:
# mean in group Огурчик  mean in group Перчик
# 4.027118              3.527202

t$statistic
t
# 2.66903 - t-критерий

t$p.value
# [1] 0.008321692 - p-значение
# < 0.05 - Ho отвергается 

t$conf.int
# [1] 0.1302568 0.8695740  - доверительный интервал
# attr(,"conf.level")
# [1] 0.95
t$estimate
# mean in group Огурчик  mean in group Перчик - средние по группе
#               4.027118              3.527202

library(ggplot2)
ggplot(df, aes(x=food, y=score)) + stat_summary(fum.data = mean_cl_boot)
# строим график с доверительными интервалами
# график лежит в Rplot.pdf - интервалы не пересекаются, а значит есть статистически значимые различия
# - Ho-отвергается

set.seed(0)
df = data.frame('Before' =rnorm(100, 3.5, 1.2), 'After' =rnorm(100, 4.1, 1.6))
df

# t-критерий Стьюдента для связных выборок
t=t.test(df$Before, df$After, paired=T)
t

# Paired t-test
#
# data:  df$Before and df$After
# t = -2.8425, df = 99, p-value = 0.005436
# alternative hypothesis: true mean difference is not equal to 0
# 95 percent confidence interval:
#  -0.8488776 -0.1509531
# sample estimates:
# mean difference
#      -0.4999154
# p-value = 0.005436 < 0.05 => отвергаем H0

# mean(df$Before)
# [1] 3.527202
# mean(df$After)
# [1] 4.027118
# среднее улучшилось

# t-критерий вилкоксона - проверяет есть ли сдвиг влево/вправо
wilcox.test(df$Before, df$After, paired=T)

# Wilcoxon signed rank test with continuity correction
#
# data:  df$Before and df$After
# V = 1857, p-value = 0.02173
# alternative hypothesis: true location shift is not equal to 0
# сдвиг не равен 0

# Критерий Макнемара - используется для бинарных данных
# Переводим значения таблицы в бинарные
Before=ifelse(df$Before>= 6, 'Нравится', 'Не нравится')
After=ifelse(df$After>= 6, 'Нравится', 'Не нравится')
tab=table(Before, After)
tab

#               After
# Before        Не нравится Нравится
# Не нравится          87       11
# Нравится              1        1

mcnemar.test(tab)

# McNemar's Chi-squared test with continuity correction
#
# data:  tab
# McNemar's chi-squared = 6.75, df = 1, p-value = 0.009375






